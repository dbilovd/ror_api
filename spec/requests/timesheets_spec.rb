require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/timesheets", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Timesheet. As you add validations to Timesheet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    timesheet = build(:timesheet, { employee: @employee })
    {
      company: timesheet.company,
      date: timesheet.date.strftime("%Y-%m-%d"),
      start_time: timesheet.start_time.strftime("%H:%M"),
      end_time: timesheet.end_time.strftime("%H:%M")
    }
  }

  let(:invalid_attributes) {
    {
      company: "",
      date: "invalid date",
      start_time: "not-a-time",
      end_time: "not-a-time"
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TimesheetsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders all timesheets by this employee" do
      employee = create(:employee)
      timesheet = create(:timesheet, { employee: employee })
      timesheet_2 = create(:timesheet, { employee: employee })

      valid_headers['Authorization'] = "Bearer " + employee.api_key
      get timesheets_url, headers: valid_headers, as: :json
      expect(response).to be_successful

      parsed_json = JSON.parse(response.body)
      expect(parsed_json[0]["id"]).to eq(timesheet[:id])
      expect(parsed_json[1]["id"]).to eq(timesheet_2[:id])
    end

    it "does not render timesheets by a different employee" do
      employee = create(:employee)
      timesheet = create(:timesheet, { employee: employee })

      employee_2 = create(:employee)
      timesheet_2 = create(:timesheet, { employee: employee_2 })

      valid_headers['Authorization'] = "Bearer " + employee.api_key
      get timesheets_url, headers: valid_headers, as: :json
      expect(response).to be_successful

      parsed_json = JSON.parse(response.body)
      expect(parsed_json.length).to eq(1)
      expect(parsed_json[0]["id"]).to eq(timesheet[:id])
    end
  end

  describe "GET /show" do
    it "renders a successful response for owner employee" do
      timesheet = create(:timesheet, valid_attributes)

      valid_headers['Authorization'] = "Bearer " + timesheet.employee.api_key
      get timesheet_url(timesheet), headers: valid_headers, as: :json
      expect(response).to be_successful
      parsed_json = JSON.parse(response.body)
      expect(parsed_json['company']).to eq(timesheet.company)
      expect(parsed_json['date']).to eq(timesheet.date.strftime("%Y-%m-%d"))
      expect(parsed_json['start_time']).to eq(timesheet.start_time.strftime("%H:%M"))
      expect(parsed_json['end_time']).to eq(timesheet.end_time.strftime("%H:%M"))
    end

    it "renders a 404 response for employee NOT Owner" do
      timesheet = create(:timesheet, valid_attributes)

      another_employee = create(:employee)
      valid_headers['Authorization'] = "Bearer " + another_employee.api_key

      get timesheet_url(timesheet), headers: valid_headers, as: :json
      expect(response).to have_http_status(:not_found)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Timesheet" do
        employee = create(:employee)
        valid_attributes['employee_id'] = employee.id
        valid_headers['Authorization'] = "Bearer " + employee.api_key

        expect {
          post timesheets_url,
               params: { timesheet: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Timesheet, :count).by(1)
      end

      it "renders a JSON response with the new timesheet" do
        employee = create(:employee)
        valid_headers['Authorization'] = "Bearer " + employee.api_key

        post timesheets_url,
             params: { timesheet: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))

        parsed_json = JSON.parse(response.body)
        expect(parsed_json["employee"]["id"]).to eq(employee[:id])
      end

      it "does not create a new Timesheet when employee provides hours overlaps with previous timesheet" do
        employee = create(:employee)
        valid_attributes['employee_id'] = employee.id
      
        overlapping_timesheet = create(:timesheet, {
          employee_id: employee.id,
          date: valid_attributes[:date],
          start_time: Time.parse(valid_attributes[:date] + " " + valid_attributes[:start_time]),
          end_time: Time.parse(valid_attributes[:date] + " " + valid_attributes[:end_time])
        })

        expect {
          post timesheets_url,
               params: { timesheet: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Timesheet, :count).by(0)
      end

      it "creates a new Timesheet when employee provides hours overlaps with ANOTHER EMPLOYEEs existing timesheet" do
        employee = create(:employee)
      
        employee1 = create(:employee)
        overlapping_timesheet = create(:timesheet, {
          employee_id: employee1.id,
          date: valid_attributes[:date],
          start_time: Time.parse(valid_attributes[:date] + " " + valid_attributes[:start_time]),
          end_time: Time.parse(valid_attributes[:date] + " " + valid_attributes[:end_time])
        })

        valid_headers['Authorization'] = "Bearer " + employee.api_key
        expect {
          post timesheets_url,
               params: { timesheet: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Timesheet, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Timesheet" do
        expect {
          post timesheets_url,
               params: { timesheet: invalid_attributes }, as: :json
        }.to change(Timesheet, :count).by(0)
      end

      it "renders a JSON response with errors for the new timesheet" do
        employee = create(:employee)
        valid_headers['Authorization'] = "Bearer " + employee.api_key

        post timesheets_url,
             params: { timesheet: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
      
      it "does not create a new Timesheet for invalid date" do
        invalid_attributes['date'] = "Invalid Date"
        expect {
          post timesheets_url,
               params: { timesheet: invalid_attributes }, as: :json
        }.to change(Timesheet, :count).by(0)
      end

      it "does not create a new Timesheet for invalid start_time" do
        invalid_attributes['start_time'] = "Invalid Time"
        expect {
          post timesheets_url,
               params: { timesheet: invalid_attributes }, as: :json
        }.to change(Timesheet, :count).by(0)
      end

      it "does not create a new Timesheet for invalid end_time" do
        invalid_attributes['end_time'] = "Invalid Time"
        expect {
          post timesheets_url,
               params: { timesheet: invalid_attributes }, as: :json
        }.to change(Timesheet, :count).by(0)
      end

      it "does not create a new Timesheet for end_time before start_time" do
        invalid_attributes['end_time'] = "09:00"
        invalid_attributes['start_time'] = "10:00"
        expect {
          post timesheets_url,
               params: { timesheet: invalid_attributes }, as: :json
        }.to change(Timesheet, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          company: "Vodafone",
          date: "2019-08-02",
          start_time: "10:00",
          end_time: "18:00"
        }
      }

      it "updates the requested timesheet" do
        timesheet = create(:timesheet, valid_attributes)

        valid_headers['Authorization'] = "Bearer " + timesheet.employee.api_key

        patch timesheet_url(timesheet),
              params: { timesheet: new_attributes }, headers: valid_headers, as: :json
        timesheet.reload
        
        parsed_json = JSON.parse(response.body)
        expect(parsed_json[:company]).to eq(new_attributes['company'])
        expect(parsed_json[:date]).to eq(new_attributes['date'])
        expect(parsed_json[:start_time]).to eq(new_attributes['start_time'])
        expect(parsed_json[:end_time]).to eq(new_attributes['end_time'])
      end

      it "renders a JSON response with the timesheet" do
        timesheet = create(:timesheet, valid_attributes)

        valid_headers['Authorization'] = "Bearer " + timesheet.employee.api_key

        patch timesheet_url(timesheet),
              params: { timesheet: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders a 404 response for employee NOT Owner" do
        timesheet = create(:timesheet, valid_attributes)

        another_employee = create(:employee)
        valid_headers['Authorization'] = "Bearer " + another_employee.api_key

        patch timesheet_url(timesheet),
              params: { timesheet: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:not_found)
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the timesheet" do
        timesheet = create(:timesheet, valid_attributes)

        valid_headers['Authorization'] = "Bearer " + timesheet.employee.api_key

        patch timesheet_url(timesheet),
              params: { timesheet: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested timesheet" do
      timesheet = create(:timesheet, valid_attributes)
      valid_headers['Authorization'] = "Bearer " + timesheet.employee.api_key
      expect {
        delete timesheet_url(timesheet), headers: valid_headers, as: :json
      }.to change(Timesheet, :count).by(-1)
    end

    it "renders a 404 response for employee NOT Owner" do
      timesheet = create(:timesheet, valid_attributes)

      another_employee = create(:employee)
      valid_headers['Authorization'] = "Bearer " + another_employee.api_key

      expect {
        delete timesheet_url(timesheet), headers: valid_headers, as: :json
      }.to change(Timesheet, :count).by(0)
      expect(response).to have_http_status(:not_found)
    end
  end
end
